trigger:
  branches:
    include:
      - main

variables:
  - group: "sd1121-msa-var"
  - tag: "$(Build.BuildId)"
  - imageFrontend: "frontend"
  - imageBackend: "backend"
  - acrName: "btdevopsacr"
  - gitRepoUrl: "https://github.com/tuyentrantb/sd1121_msa"
  - gitBranch: "main"
  - azureSubscription: azureSubscription
    value: "practicalDevopsServiceConnection"
  - resourceGroupName: "practicaldevops"
  - aksClusterName: "btdevops-aks"
  - aksNamespace: "btdevops"

# Pool build
pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: Docker Build and Push Image
    jobs:
      - job: Build
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az acr login --name $(acrName)
                git clone --branch $(gitBranch) $(gitRepoUrl) repo

                # Build Docker image for frontend
                cd repo/src/$(imageFrontend)
                docker build -t $(acrName).azurecr.io/$(imageFrontend):$(tag) .
                docker push $(acrName).azurecr.io/$(imageFrontend):$(tag)

                # Build Docker image for backend
                cd ../src/$(imageBackend)
                docker build -t $(acrName).azurecr.io/$(imageBackend):$(tag) .
                docker push $(acrName).azurecr.io/$(imageBackend):$(tag)

              addSpnToEnvironment: true

          - script: |
              echo "Images pushed to ACR:"
              echo "$(acrName).azurecr.io/$(imageFrontend):$(tag)"
              echo "$(acrName).azurecr.io/$(imageBackend):$(tag)"
            displayName: "Show Image Info"
  - stage: Deploy to AKS
    jobs:
      - job: Deploy
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.x"
              addToPath: true
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName)
          - task: Kubernetes@1
            inputs:
              azureSubscription: $(azureSubscription)
              azureResourceGroup: $(resourceGroupName)
              kubernetesCluster: $(aksClusterName)
              namespace: $(aksNamespace)
              command: "apply"
              arguments: "-f $(System.DefaultWorkingDirectory)/k8s/az/"
